<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="campuslifecenter.notice.mapper.AccountNoticeTodoMapper">
  <resultMap id="BaseResultMap" type="campuslifecenter.notice.entry.AccountNoticeTodo">
    <id column="nid" jdbcType="BIGINT" property="nid" />
    <id column="id" jdbcType="INTEGER" property="id" />
    <id column="aid" jdbcType="VARCHAR" property="aid" />
    <result column="is_finish" jdbcType="BIT" property="isFinish" />
    <result column="is_top" jdbcType="BIT" property="isTop" />
    <result column="is_add" jdbcType="BIT" property="isAdd" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    nid, id, aid, is_finish, is_top, is_add
  </sql>
  <select id="selectByExample" parameterType="campuslifecenter.notice.entry.AccountNoticeTodoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from account_notice_todo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="campuslifecenter.notice.entry.AccountNoticeTodoExample">
    delete from account_notice_todo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertSelective" parameterType="campuslifecenter.notice.entry.AccountNoticeTodo">
    insert into account_notice_todo
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="nid != null">
        nid,
      </if>
      <if test="id != null">
        id,
      </if>
      <if test="aid != null">
        aid,
      </if>
      <if test="isFinish != null">
        is_finish,
      </if>
      <if test="isTop != null">
        is_top,
      </if>
      <if test="isAdd != null">
        is_add,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="nid != null">
        #{nid,jdbcType=BIGINT},
      </if>
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="aid != null">
        #{aid,jdbcType=VARCHAR},
      </if>
      <if test="isFinish != null">
        #{isFinish,jdbcType=BIT},
      </if>
      <if test="isTop != null">
        #{isTop,jdbcType=BIT},
      </if>
      <if test="isAdd != null">
        #{isAdd,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="campuslifecenter.notice.entry.AccountNoticeTodoExample" resultType="java.lang.Long">
    select count(*) from account_notice_todo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update account_notice_todo
    <set>
      <if test="record.nid != null">
        nid = #{record.nid,jdbcType=BIGINT},
      </if>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.aid != null">
        aid = #{record.aid,jdbcType=VARCHAR},
      </if>
      <if test="record.isFinish != null">
        is_finish = #{record.isFinish,jdbcType=BIT},
      </if>
      <if test="record.isTop != null">
        is_top = #{record.isTop,jdbcType=BIT},
      </if>
      <if test="record.isAdd != null">
        is_add = #{record.isAdd,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update account_notice_todo
    set nid = #{record.nid,jdbcType=BIGINT},
      id = #{record.id,jdbcType=INTEGER},
      aid = #{record.aid,jdbcType=VARCHAR},
      is_finish = #{record.isFinish,jdbcType=BIT},
      is_top = #{record.isTop,jdbcType=BIT},
      is_add = #{record.isAdd,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="campuslifecenter.notice.entry.AccountNoticeTodo">
    update account_notice_todo
    <set>
      <if test="isFinish != null">
        is_finish = #{isFinish,jdbcType=BIT},
      </if>
      <if test="isTop != null">
        is_top = #{isTop,jdbcType=BIT},
      </if>
      <if test="isAdd != null">
        is_add = #{isAdd,jdbcType=BIT},
      </if>
    </set>
    where nid = #{nid,jdbcType=BIGINT}
      and id = #{id,jdbcType=INTEGER}
      and aid = #{aid,jdbcType=VARCHAR}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="campuslifecenter.notice.entry.AccountNoticeTodoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from account_notice_todo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>