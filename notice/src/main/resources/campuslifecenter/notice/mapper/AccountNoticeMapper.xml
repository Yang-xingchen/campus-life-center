<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="campuslifecenter.notice.mapper.AccountNoticeMapper">
  <resultMap id="BaseResultMap" type="campuslifecenter.notice.entry.AccountNotice">
    <id column="nid" jdbcType="INTEGER" property="nid" />
    <id column="aid" jdbcType="VARCHAR" property="aid" />
    <result column="is_read" jdbcType="TINYINT" property="isRead" />
    <result column="top" jdbcType="TINYINT" property="top" />
    <result column="is_delete" jdbcType="TINYINT" property="isDelete" />
    <result column="relative_importance" jdbcType="TINYINT" property="relativeImportance" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    nid, aid, is_read, top, is_delete, relative_importance
  </sql>
  <select id="selectByExample" parameterType="campuslifecenter.notice.entry.AccountNoticeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from account_notice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="campuslifecenter.notice.entry.AccountNoticeExample">
    delete from account_notice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertSelective" parameterType="campuslifecenter.notice.entry.AccountNotice">
    insert into account_notice
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="nid != null">
        nid,
      </if>
      <if test="aid != null">
        aid,
      </if>
      <if test="isRead != null">
        is_read,
      </if>
      <if test="top != null">
        top,
      </if>
      <if test="isDelete != null">
        is_delete,
      </if>
      <if test="relativeImportance != null">
        relative_importance,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="nid != null">
        #{nid,jdbcType=INTEGER},
      </if>
      <if test="aid != null">
        #{aid,jdbcType=VARCHAR},
      </if>
      <if test="isRead != null">
        #{isRead,jdbcType=TINYINT},
      </if>
      <if test="top != null">
        #{top,jdbcType=TINYINT},
      </if>
      <if test="isDelete != null">
        #{isDelete,jdbcType=TINYINT},
      </if>
      <if test="relativeImportance != null">
        #{relativeImportance,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="campuslifecenter.notice.entry.AccountNoticeExample" resultType="java.lang.Long">
    select count(*) from account_notice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update account_notice
    <set>
      <if test="record.nid != null">
        nid = #{record.nid,jdbcType=INTEGER},
      </if>
      <if test="record.aid != null">
        aid = #{record.aid,jdbcType=VARCHAR},
      </if>
      <if test="record.isRead != null">
        is_read = #{record.isRead,jdbcType=TINYINT},
      </if>
      <if test="record.top != null">
        top = #{record.top,jdbcType=TINYINT},
      </if>
      <if test="record.isDelete != null">
        is_delete = #{record.isDelete,jdbcType=TINYINT},
      </if>
      <if test="record.relativeImportance != null">
        relative_importance = #{record.relativeImportance,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update account_notice
    set nid = #{record.nid,jdbcType=INTEGER},
      aid = #{record.aid,jdbcType=VARCHAR},
      is_read = #{record.isRead,jdbcType=TINYINT},
      top = #{record.top,jdbcType=TINYINT},
      is_delete = #{record.isDelete,jdbcType=TINYINT},
      relative_importance = #{record.relativeImportance,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="campuslifecenter.notice.entry.AccountNotice">
    update account_notice
    <set>
      <if test="isRead != null">
        is_read = #{isRead,jdbcType=TINYINT},
      </if>
      <if test="top != null">
        top = #{top,jdbcType=TINYINT},
      </if>
      <if test="isDelete != null">
        is_delete = #{isDelete,jdbcType=TINYINT},
      </if>
      <if test="relativeImportance != null">
        relative_importance = #{relativeImportance,jdbcType=TINYINT},
      </if>
    </set>
    where nid = #{nid,jdbcType=INTEGER}
      and aid = #{aid,jdbcType=VARCHAR}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="campuslifecenter.notice.entry.AccountNoticeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from account_notice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>